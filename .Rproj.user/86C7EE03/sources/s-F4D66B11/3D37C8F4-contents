library(shiny)
library(shinydashboard)
library(mapview)
library(dashboardthemes)
library(RPostgres)
library(sqldf)
library(ggthemes)
library(ggplot2)
library(formattable)

#################
# FILTER FUNCTION
##################
dynamic_query <- function(con, state){
  state_id <- base::switch(
    state,
    "Australia" = "(0, 1 ,2 ,3, 4, 5, 6, 7)",
    "ACT" = "(0)",
    "NSW" = "(1)",
    "NT" = "(2)",
    "QLD" = "(3)",
    "SA" = "(4)",
    "TAS" = "(5)",
    "VIC" = "(6)",
    "WA" = "(7)"
    
  )
  query_results <- c(
    toString(dbGetQuery(con, sprintf(
      paste0("SELECT ", 
             "count(*) ",
             "FROM ",
             "public.\"factListings\" fl ",
             "LEFT OUTER JOIN ",
             "public.\"dimProperty\" dp ",
             "ON ",
             "fl.\"property_id\" = dp.\"property_id\" ",
             "WHERE ",
             "dp.\"state_id\" IN %s",
             ";"),
      state_id))[1, 1])
    ,
    toString(dbGetQuery(con, sprintf(
      paste0("WITH ",
             "fl_price AS ",
             "( ",
             "SELECT ",
             "1 ",
             "UNION ALL ",
             "SELECT ",
             "2 ",
             "UNION ALL ",
             "SELECT ", 
             "100 ",
             ") ",
             "SELECT ",
             "percentile_cont(0.5) WITHIN GROUP ", 
             "( ",
             "ORDER BY fl.\"price\" ",
             ") ",
             "FROM ",
             "PUBLIC.\"factListings\" fl ",
             "LEFT OUTER JOIN ",
             "PUBLIC.\"dimProperty\" dp ",
             "ON ",
             "fl.\"property_id\" = dp.\"property_id\" ", 
             "WHERE dp.\"state_id\" IN %s ",
             ";"),
      state_id))[1, 1])
    ,
    toString(dbGetQuery(con, sprintf(
      paste0("WITH ",
             "fl_land_size AS ",
             "( ",
             "SELECT ",
             "1 ",
             "UNION ALL ",
             "SELECT ",
             "2 ",
             "UNION ALL ",
             "SELECT ", 
             "100 ",
             ") ",
             "SELECT ",
             "percentile_cont(0.5) WITHIN GROUP ", 
             "( ",
             "ORDER BY fl.\"land_size\" ",
             ") ",
             "FROM ",
             "PUBLIC.\"factListings\" fl ",
             "LEFT OUTER JOIN ",
             "PUBLIC.\"dimProperty\" dp ",
             "ON ",
             "fl.\"property_id\" = dp.\"property_id\" ", 
             "WHERE dp.\"state_id\" IN %s ",
             ";"),
      state_id))[1, 1])
  )
  
  return(query_results) 
}

con <- dbConnect(
  RPostgres::Postgres(),
  host = "localhost",
  port = "5432",
  dbname = "REI_Prod",
  user = "postgres",
  password = "690151")

factListings <- dbGetQuery(con, "
  SELECT
  *
  FROM
  public.\"factListings\"
  ;
  ")

dimProperty <- dbGetQuery(con, "
  SELECT
  *
  FROM
  public.\"dimProperty\"
  ;
  ")

df_price_graph <- sqldf(
  "
    SELECT
    listing_download_date AS Listing_Date
    ,median(price) AS Median_Price
    FROM
    factListings
    GROUP BY
    listing_download_date
    ;
    "
)

df_median_price <- sqldf("
    SELECT
    median(price)
    FROM
    factListings
    ;
    ")


df_median_land_size <- sqldf("
    SELECT
    median(land_size)
    FROM
    factListings
    WHERE
    land_size_unit = 'm²'
    ;
    ")


ui <- dashboardPage(
  dashboardHeader(title = "REI AU"),
  dashboardSidebar(sidebarMenu(
    menuItem(
      "Dashboard",
      tabName = "1Dashboard",
      icon = icon("dashboard", verify_fa = FALSE)
    )
  )),
  dashboardBody(# shinyDashboardThemes(theme = "grey_dark"),
    tabItems(
      # First tab content
      tabItem(
        tabName = "1Dashboard",
        fluidRow(
          # Dynamic valueBoxes
          valueBoxOutput("listingNumberBox"),

          valueBoxOutput("listingMedianPriceBox"),

          valueBoxOutput("listingMedianLandSizeBox")
        ),
        fluidRow(column(
          width = 8,

          box(
            # title = "",
            width = NULL,
            solidHeader = TRUE,
            plotOutput("PriceGraph")
          ),

        ),

        column(
          width = 4,
          box(
            title = "Slicer",
            width = NULL,
            solidHeader = TRUE,
            status = "primary",
            # background = "light-blue",

            # radioButtons(
            #   "region",
            #   "Region:",
            #   c( # can change these mapping done in server below
            #     "Australia" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\";"
            #       )[1, 1]
            #     ),
            #     "Australian Capital Territory" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('0');"
            #       )[1, 1]
            #     ),
            #     "New South Wales" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('1');"
            #       )[1, 1]
            #     ),
            #     "Northern Territory" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('2');"
            #       )[1, 1]
            #     ),
            #     "Queensland" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('3');"
            #       )[1, 1]
            #     ),
            #     "South Australia" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('4');"
            #       )[1, 1]
            #     ),
            #     "Tasmania" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('5');"
            #       )[1, 1]
            #     ),
            #     "Victoria" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('6');"
            #       )[1, 1]
            #     ),
            #     "Western Australia" = toString(
            #       RPostgres::dbGetQuery(
            #         con, 
            #         "SELECT count(*) FROM public.\"factListings\" fl LEFT OUTER JOIN public.\"dimProperty\" dp ON fl.\"property_id\" = dp.\"property_id\" WHERE dp.\"state_id\" IN ('7');"
            #       )[1, 1]
            #     )
            #   )
            # )
            
            radioButtons(
              "region",
              "Region:",
              c( # can change these mapping done in server below
                "Australia" = "Australia",
                "Australian Capital Territory" = "ACT",
                "New South Wales" = "NSW",
                "Northern Territory" = "NT",
                "Queensland" =  "QLD",
                "South Australia" = "SA",
                "Tasmania" = "TAS",
                "Victoria" = "VIC",
                "Western Australia" = "WA"
              )
            )

          ),

        ))
      )

    ))
)

server <- function(input, output) {
  ##########################################
  # tab 1 - Australia housing outlook - slice by state
  ##########################################
  # - median house price
  # - # props
  # median house price over time (seperate slicer)
  # - bar graph with no. bedrooms, bath, parking?
  # - median house/land size
  # - 'hottest' suburbs
  # - slicer to slice above by state
  # - slice by time period (download date)

    output$listingNumberBox <- renderValueBox({
    valueBox(
      currency(
        dynamic_query(con, input$region)[1],
        big.mark = " ",
        digits = 0L,
        symbol = ""
      ),
      "Listings",
      icon = icon("home"),
      color = "blue"
    )
  })

    output$listingMedianPriceBox <- renderValueBox({
    valueBox(
      currency(
        dynamic_query(con, input$region)[2],
        digits = 0L,
        symbol = ""),
      "Median price",
      icon = icon("dollar-sign"),
      color = "blue"
    )
  })

  output$listingMedianLandSizeBox <- renderValueBox({
    valueBox(
      paste0(
        currency(
          dynamic_query(con, input$region)[3],
          big.mark = " ",
          digits = 0L,
          symbol = ""
        ),
        " m²"
      ),
      "Median land size",
      icon = icon("resize-full", lib = "glyphicon"),
      color = "blue"
    )
  })

  output$PriceGraph <- renderPlot({
    ggplot(df_price_graph,
           aes(x = Listing_Date,
               y = Median_Price,
               group = 1))  +
      geom_line() +
      geom_point() +
      xlab("Listing Date") +
      ylab("Median Price") +
      ggthemes::theme_fivethirtyeight() +
      theme(axis.text.x = element_text(
        angle = -270,
        hjust = 0,
        vjust = -0.1
      ),
      axis.title = element_text())
  })

}


################

shinyApp(ui, server)