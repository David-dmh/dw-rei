# create df
df <- data.frame(codebook_vecs)
df
# use DataExplorer
introduce(df)
plot_intro(df)
plot_histogram(df)
plot_qq(df)
plot_correlation(df)
# discretize for use in Py
df
exp_df <- (discretizeDF(df))
exp_df
# export df here
# np <- import("numpy")
# mat <- np$load("data.npy") # data reading
# export df here
# data(exp_df)
# iris$Species = unclass(iris$Species)
write.table(exp_df, file="np_df.txt", row.names=F, sep=",")
# now start a python session
# import numpy as NP
# fpath = "/path/to/my/file/np_iris.txt"
# A = NP.loadtxt(fpath, comments="#", delimiter=",", skiprows=1)
# print(A.shape)
# print(A[1:5,])
shiny::runApp('FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/app')
runApp('FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/app')
install.packages("odbc")
install.packages("odbc")
install.packages("odbc")
cls
install.packages("RPostgres")
install.packages("RPostgres")
cls
install.packages(odbc)
install.packages("odbc"")
c
cls
install.packages("odbc")
library(odbc)
con <- DBI::dbConnect(odbc::odbc(),
Driver="PostgreSQL Driver",
Server="127.0.0.1",
Database="REI_Stage",
UID=rstudioapi::askForPassword("Database users"),
PWD=rstudioapi::askForPassword("Database password"),
Port=5432)
con <- DBI::dbConnect(odbc::odbc(),
Driver="PostgreSQL Driver",
Server="localhost",
Database="REI_Stage",
UID=rstudioapi::askForPassword("Database users"),
PWD=rstudioapi::askForPassword("Database password"),
Port=5432)
con <- DBI::dbConnect(odbc::odbc(),
Driver="PostgreSQL 13",
Server="localhost",
Database="REI_Stage",
UID=rstudioapi::askForPassword("Database users"),
PWD=rstudioapi::askForPassword("Database password"),
Port=5432)
con <- DBI::dbConnect(odbc::odbc(),
Driver="PostgreSQL 13",
Server="localhost",
Database="postgres",
UID=rstudioapi::askForPassword("Database users"),
PWD=rstudioapi::askForPassword("Database password"),
Port=5432)
con <- DBI::dbConnect(odbc::odbc(),
Driver="PostgreSQL 13",
Server="localhost",
Database="postgres",
UID=rstudioapi::askForPassword("Database user"),
PWD=rstudioapi::askForPassword("Database password"),
Port=5432)
con <- DBI::dbConnect(odbc::odbc(),
Driver=dbDriver(drvName="PostgreSQL"),
Server="localhost",
Database="postgres",
UID=rstudioapi::askForPassword("Database user"),
PWD=rstudioapi::askForPassword("Database password"),
Port=5432)
install.packages("RPostgreSQL")
con <- DBI::dbConnect(odbc::odbc(),
Driver="PostgreSQL Unicode",
Server="localhost",
Database="postgres",
UserName=rstudioapi::askForPassword("Database user"),
Password=rstudioapi::askForPassword("Database password"),
Port=5432)
install.packages('RJDBC')
## Loading required package: rJava
db <- DBI::dbConnect(RJDBC::JDBC("org.postgresql.Driver","~/postgresql-42.2.2.jar"),
url = "jdbc:postgresql://localhost:5432/postgres",
user = "postgres",
password = getPass("Enter Password:"))
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("RcppCore/Rcpp")
install.packages("Rcpp")
install.packages("DBI")
install.packages("RPostgres")
# install.packages("devtools")
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres)
library(DBI)
con <- dbConnect(RPostgres::Postgres()
, host="localhost"
, port="5432"
, dbname="postgres"
, user="postgres"
, password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "test_table")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
dbExistsTable(con, "factListings")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
dbExistsTable(con, "factListing")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
dbExistsTable(con, "factListings")
# run query to get results as df
dbGetQuery(db, "SELECT * FROM factListings LIMIT 3")
# run query to get results as df
dbGetQuery(con, "SELECT * FROM factListings LIMIT 3")
# run query to get results as df
dbGetQuery(con, "SELECT * FROM public.factListings LIMIT 3")
# run query to get results as df
dbGetQuery(con, "SELECT * FROM public.'factListings' LIMIT 3")
# run query to get results as df
dbGetQuery(con, "SELECT * FROM public.'factListings' LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
dbExistsTable(con, "public.'factListings'")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
dbExistsTable(con, "factListings")
# run query to get results as df
dbGetQuery(con, "SELECT * FROM factListings LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM factListings LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM \'public\'.factListings LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM public.factListings LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM public.factListings LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM public.factListings;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM public.dimState LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM dimState LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, SELECT * FROM 'dimState' LIMIT 3;")
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres)
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, SELECT * FROM \"dimState\" LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM \"dimState\" LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "SELECT * FROM public.\"dimState\" LIMIT 3;")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "
SELECT
*
FROM
public.\"dimState\" LIMIT 3
;
")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "
SELECT
*
FROM
public.\"factListings\"
LIMIT
3
;
")
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
dbGetQuery(con, "
SELECT
*
FROM
public.\"factListings\"
LIMIT
3
;
")
dbGetQuery(con, "
SELECT
*
FROM
public.\"factListings\"
;
")
df <- dbGetQuery(con, "
SELECT
*
FROM
public.\"factListings\"
;
")
head(df)
class(df)
head(df)
shiny::runApp('FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/app')
shiny::runApp('FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/app')
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres)
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
df_factListings <- dbGetQuery(con, "
SELECT
*
FROM
public.\"factListings\"
;
")
df_dimProperty <- dbGetQuery(con, "
SELECT
*
FROM
public.\"dimProperty\"
;
")
head(df_factListings)
head(df_dimProperty)
shiny::runApp()
runApp()
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres)
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
df_factListings <- dbGetQuery(con, "
SELECT
*
FROM
public.\"factListings\"
;
")
df_dimProperty <- dbGetQuery(con, "
SELECT
*
FROM
public.\"dimProperty\"
;
")
head(df_factListings)
head(df_dimProperty)
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres)
library(DBI)
library(tidyverse)
install.packages("ggmap")
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres)
library(DBI)
library(tidyverse)
library(ggmap)
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres);
library(DBI);
library(tidyverse);
library(ggmap);
con <- dbConnect(RPostgres::Postgres(),
host="localhost",
port="5432",
dbname="REI_Stage",
user="postgres",
password=rstudioapi::askForPassword("Database password"))
# dbExistsTable(con, "factListings")
df_factListings <- dbGetQuery(con, "
SELECT
*
FROM
public.\"factListings\"
;
")
df_dimProperty <- dbGetQuery(con, "
SELECT
*
FROM
public.\"dimProperty\"
;
")
head(df_factListings)
head(df_dimProperty)
head(df_dimProperty)
df_dimProperty[, 3]
df_dimProperty[:, 3]
df_dimProperty[, 3]
subset(df_dimProperty, select = c("full_address"))
class(subset(df_dimProperty, select = c("full_address")))
subset(df_dimProperty, select = c("full_address"))
df_dimProperty_fas <- subset(df_dimProperty, select = c("full_address"))
df_dimProperty_fas <- subset(df_dimProperty, select = c("full_address"))
head(df_dimProperty_fas)
# check API usage
geocodeQueryCheck()
df_dimProperty_fas_ll <- mutate_geocode(subset(df_dimProperty, select=c("full_address")), full_address)
?register_google
Sys.getenv(Google_Maps_Platform_API_Key)
Sys.getenv("Google_Maps_Platform_API_Key")
Sys.setenv(Google_Maps_Platform_API_Key = "AIzaSyCQAFyy5SeIcnlBfzewaUxiHZ3P48Pa-ek")
Sys.getenv("Google_Maps_Platform_API_Key")
Sys.getenv("Google_Maps_Platform_API_Key")
# ?register_google
register_google(key=Sys.getenv("Google_Maps_Platform_API_Key"))
df_dimProperty_fas_ll <- mutate_geocode(subset(df_dimProperty, select=c("full_address")), full_address)
head(df_dimProperty_fas_ll)
write.csv(df_dimProperty_fas_ll, "C:\Users\User\Documents\FINANCES_CAREER\ONLINE_BUSINESS\Backend_API_v2\eda\geocoded_loc_ref.csv")
write.csv(df_dimProperty_fas_ll, "C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
df_dimProperty_fas_ll <- read.csv("C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
df_dimProperty_fas_ll
# df_dimProperty_fas_ll <- read.csv("C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
subset(df_dimProperty_fas_ll, select=c("full_address", "lon", "lat"))
df_dimProperty_fas_ll <- subset(df_dimProperty_fas_ll, select=c("full_address", "lon", "lat"))
df_dimProperty_fas_ll
# write.csv(df_dimProperty_fas_ll, "C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
#
# df_dimProperty_fas_ll <- read.csv("C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
df_dimProperty_fas_ll <- subset(df_dimProperty_fas_ll, select=c("full_address", "lon", "lat"))
df_dimProperty_fas_ll
write.csv(df_dimProperty_fas_ll, "C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv", row.names=FALSE)
#
# df_dimProperty_fas_ll <- read.csv("C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
# df_dimProperty_fas_ll <- subset(df_dimProperty_fas_ll, select=c("full_address", "lon", "lat"))
# df_dimProperty_fas_ll
# write.csv(df_dimProperty_fas_ll, "C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv", row.names=FALSE)
#
df_dimProperty_fas_ll <- read.csv("C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
df_dimProperty_fas_ll
# df_dimProperty_fas_ll <- subset(df_dimProperty_fas_ll, select=c("full_address", "lon", "lat"))
# df_dimProperty_fas_ll
# write.csv(df_dimProperty_fas_ll, "C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv", row.names=FALSE)
#
# df_dimProperty_fas_ll <- read.csv("C:/Users/User/Documents/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda/geocoded_loc_ref.csv")
class(df_dimProperty_fas_ll)
head(df_dimProperty_fas_ll)
# df_dimProperty_fas_ll <- mutate_geocode(subset(df_dimProperty, select=c("full_address")), full_address)
setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres);
library(DBI);
library(tidyverse);
library(ggmap);
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres);
library(DBI);
library(tidyverse);
library(ggmap);
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres);
library(DBI);
library(tidyverse);
library(ggmap);
setwd("~/FINANCES_CAREER/ONLINE_BUSINESS/Backend_API_v2/eda")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# install.packages("Rcpp")
# install.packages("DBI")
# install.packages("RPostgres")
library(RPostgres);
library(DBI);
library(tidyverse);
library(ggmap);
